---
import siteConfig from "@/config/site.json";
import { getAbsoluteUrl } from "@/lib/utils";

export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  author?: string;
  image?: string;
  url?: string;
  type?: "website" | "article" | "profile";
  publishedTime?: string;
  modifiedTime?: string;
  section?: string;
  tags?: string[];
  twitterCard?: "summary" | "summary_large_image" | "app" | "player";
  twitterCreator?: string;
  twitterSite?: string;
  noindex?: boolean;
  nofollow?: boolean;
  canonical?: string;
  ogLocale?: string;
  ogSiteName?: string;
  themeColor?: string;
  colorScheme?: "light" | "dark" | "light dark";
  viewport?: string;
  robots?: string;
}

const {
  title = siteConfig.company.name,
  description = siteConfig.company.description,
  keywords = siteConfig.company.specialties.join(", "),
  author = siteConfig.company.name,
  image = getAbsoluteUrl(
    "/og-image.png",
    Astro.site?.href || siteConfig.site.url
  ),
  url = Astro.url.href,
  type = "website",
  publishedTime,
  modifiedTime,
  section,
  tags = [],
  twitterCard = "summary_large_image",
  twitterCreator = "@educlopez",
  twitterSite = "@educlopez",
  noindex = false,
  nofollow = false,
  canonical,
  ogLocale = "en_US",
  ogSiteName = siteConfig.company.name,
  themeColor = "#ffffff",
  colorScheme = "light dark",
  viewport = "width=device-width, initial-scale=1",
  robots,
} = Astro.props;

// Build robots meta tag
const robotsContent =
  robots ||
  [
    noindex && "noindex",
    nofollow && "nofollow",
    !noindex && "index",
    !nofollow && "follow",
  ]
    .filter(Boolean)
    .join(", ");

// Build canonical URL
const canonicalUrl = canonical || Astro.url.href;

// Build Open Graph tags
const ogTags = [
  { property: "og:title", content: title },
  { property: "og:description", content: description },
  { property: "og:type", content: type },
  { property: "og:url", content: url },
  { property: "og:image", content: image },
  { property: "og:locale", content: ogLocale },
  { property: "og:site_name", content: ogSiteName },
  ...(publishedTime
    ? [{ property: "article:published_time", content: publishedTime }]
    : []),
  ...(modifiedTime
    ? [{ property: "article:modified_time", content: modifiedTime }]
    : []),
  ...(section ? [{ property: "article:section", content: section }] : []),
  ...tags.map((tag) => ({ property: "article:tag", content: tag })),
];

// Build Twitter Card tags
const twitterTags = [
  { name: "twitter:card", content: twitterCard },
  { name: "twitter:title", content: title },
  { name: "twitter:description", content: description },
  { name: "twitter:image", content: image },
  { name: "twitter:creator", content: twitterCreator },
  { name: "twitter:site", content: twitterSite },
];
---

<!-- Basic Meta Tags -->
<meta charset="UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content={viewport} />
<meta name="generator" content={Astro.generator} />

<!-- SEO Meta Tags -->
<title>{title}</title>
<meta name="description" content={description} />
<meta name="keywords" content={keywords} />
<meta name="author" content={author} />
<meta name="robots" content={robotsContent} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph Meta Tags -->
{ogTags.map((tag) => <meta property={tag.property} content={tag.content} />)}

<!-- Twitter Card Meta Tags -->
{twitterTags.map((tag) => <meta name={tag.name} content={tag.content} />)}

<!-- Additional Meta Tags -->
<meta name="theme-color" content={themeColor} />
<meta name="color-scheme" content={colorScheme} />
<meta name="format-detection" content="telephone=no" />

<!-- Favicon and App Icons -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />
<meta name="msapplication-TileColor" content={themeColor} />

<!-- Preconnect to external domains for performance -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="preconnect" href="https://cdn.jsdelivr.net" />

<!-- External CSS -->
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.0.7/dist/css/splide.min.css"
/>
<link
  href="https://cdn.jsdelivr.net/npm/keen-slider@6.8.6/keen-slider.min.css"
  rel="stylesheet"
/>

<!-- Google Fonts -->
<link
  href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&display=swap"
  rel="stylesheet"
/>

<!-- External JavaScript -->
<script
  defer
  src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.0.7/dist/js/splide.min.js"
></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"
></script>

<!-- Structured Data for SEO -->
<script
  type="application/ld+json"
  set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Person",
    name: siteConfig.company.name,
    description: siteConfig.company.description,
    url: Astro.site?.href || siteConfig.site.url,
    image: getAbsoluteUrl(
      "/og-image.png",
      Astro.site?.href || siteConfig.site.url
    ),
    sameAs: [
      siteConfig.contact.linkedin,
      siteConfig.contact.github,
      siteConfig.contact.twitter,
      siteConfig.contact.dribbble,
      siteConfig.contact.figma,
    ].filter(Boolean),
    jobTitle: "UI Designer & Frontend Developer",
    worksFor: {
      "@type": "Organization",
      name: "Freelance",
    },
    knowsAbout: siteConfig.company.specialties,
    knowsLanguage: ["English", "Spanish"],
  })}
/>
