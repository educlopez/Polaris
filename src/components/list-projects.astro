---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import siteConfig from "@/config/site.json";

const projects = await getCollection("projects");
type Project = CollectionEntry<"projects">;

// Sort projects by date in descending order (newest first)
const sortedProjects = projects.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

const { projects: projectsConfig } = siteConfig;
const gridCols = projectsConfig.gridColumns || 1;

// Generate dynamic grid classes based on the number of columns
const generateGridClass = (columns: number) => {
  if (columns === 1) {
    return "flex flex-col space-y-2";
  }

  // For 2+ columns, use CSS Grid with responsive breakpoints
  // We need to explicitly define all possible classes so Tailwind includes them
  const baseCols = Math.min(columns, 1); // 1 column on mobile
  const mdCols = Math.min(columns, 2); // 2 columns on medium screens
  const lgCols = Math.min(columns, 3); // 3 columns on large screens
  const xlCols = Math.min(columns, 4); // 4 columns on xl screens
  const twoXlCols = Math.min(columns, 6); // Max 6 columns on 2xl screens

  // Build the class string with explicit class names
  let gridClass = "grid gap-2";

  // Add responsive column classes
  if (baseCols === 1) gridClass += " grid-cols-1";
  if (mdCols === 1) gridClass += " md:grid-cols-1";
  if (mdCols === 2) gridClass += " md:grid-cols-2";
  if (lgCols === 1) gridClass += " lg:grid-cols-1";
  if (lgCols === 2) gridClass += " lg:grid-cols-2";
  if (lgCols === 3) gridClass += " lg:grid-cols-3";
  if (xlCols === 1) gridClass += " xl:grid-cols-1";
  if (xlCols === 2) gridClass += " xl:grid-cols-2";
  if (xlCols === 3) gridClass += " xl:grid-cols-3";
  if (xlCols === 4) gridClass += " xl:grid-cols-4";
  if (twoXlCols === 1) gridClass += " 2xl:grid-cols-1";
  if (twoXlCols === 2) gridClass += " 2xl:grid-cols-2";
  if (twoXlCols === 3) gridClass += " 2xl:grid-cols-3";
  if (twoXlCols === 4) gridClass += " 2xl:grid-cols-4";
  if (twoXlCols === 5) gridClass += " 2xl:grid-cols-5";
  if (twoXlCols === 6) gridClass += " 2xl:grid-cols-6";

  return gridClass;
};

const gridClass = generateGridClass(gridCols);
---

<div class={gridClass}>
  {
    sortedProjects.map((project: Project) => (
      <a
        href={`/projects/${project.id}`}
        class="relative rounded-lg lg:rounded-2xl overflow-hidden hover:opacity-95 transition-opacity aspect-[16/10]"
      >
        <Image
          alt={project.data.coverAlt}
          loading="lazy"
          width="3552"
          height="2304"
          decoding="async"
          src={project.data.cover}
          class="w-full h-full object-cover"
          transition:name={`project-${project.id}`}
        />
        <div class="absolute bottom-4 left-4 items-center gap-1.5 hidden lg:flex text-foreground">
          <div class="shrink-0">
            <Image
              src={project.data.logo.image}
              width="32"
              height="32"
              alt={`${project.data.name} logo`}
              class="w-6 h-6 rounded-full object-cover"
              onerror="this.style.display='none';this.nextElementSibling.classList.remove('hidden')"
            />
            <div
              class={`w-6 h-6 ${project.data.logo.fallback.bgColor} rounded-full hidden items-center justify-center text-white text-xs`}
            >
              {project.data.logo.fallback.text}
            </div>
          </div>
          <div class="text-xs font-semibold mix-blend-difference text-white drop-shadow-lg">
            {project.data.name}
          </div>
        </div>
      </a>
    ))
  }
</div>
